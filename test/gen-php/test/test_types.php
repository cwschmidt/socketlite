<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['E_MessageType'] = array(
  'MT_BEGIN_NUMBER' => 10,
  'MT_ECHO_REQ' => 10,
  'MT_ECHO_RES' => 11,
  'MT_HELLO_REQ' => 12,
  'MT_HELLO_RES' => 13,
  'MT_HELLO_NOTIFY' => 14,
  'MT_KEEPALIVE_REQ' => 15,
  'MT_KEEPALIVE_RES' => 16,
  'MT_KEEPALIVE_NOTIFY' => 17,
  'MT_END_NUMBER' => 18,
);

final class MessageType {
  const MT_BEGIN_NUMBER = 10;
  const MT_ECHO_REQ = 10;
  const MT_ECHO_RES = 11;
  const MT_HELLO_REQ = 12;
  const MT_HELLO_RES = 13;
  const MT_HELLO_NOTIFY = 14;
  const MT_KEEPALIVE_REQ = 15;
  const MT_KEEPALIVE_RES = 16;
  const MT_KEEPALIVE_NOTIFY = 17;
  const MT_END_NUMBER = 18;
  static public $__names = array(
    10 => 'MT_BEGIN_NUMBER',
    10 => 'MT_ECHO_REQ',
    11 => 'MT_ECHO_RES',
    12 => 'MT_HELLO_REQ',
    13 => 'MT_HELLO_RES',
    14 => 'MT_HELLO_NOTIFY',
    15 => 'MT_KEEPALIVE_REQ',
    16 => 'MT_KEEPALIVE_RES',
    17 => 'MT_KEEPALIVE_NOTIFY',
    18 => 'MT_END_NUMBER',
  );
}

class KeepAliveReq {
  static $_TSPEC;

  public $service_id = null;
  public $service_type_id = null;
  public $current_load_capacity = null;
  public $req_id = null;
  public $current_timestamp_req = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'service_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'service_type_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'current_load_capacity',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'req_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'current_timestamp_req',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['service_id'])) {
        $this->service_id = $vals['service_id'];
      }
      if (isset($vals['service_type_id'])) {
        $this->service_type_id = $vals['service_type_id'];
      }
      if (isset($vals['current_load_capacity'])) {
        $this->current_load_capacity = $vals['current_load_capacity'];
      }
      if (isset($vals['req_id'])) {
        $this->req_id = $vals['req_id'];
      }
      if (isset($vals['current_timestamp_req'])) {
        $this->current_timestamp_req = $vals['current_timestamp_req'];
      }
    }
  }

  public function getName() {
    return 'KeepAliveReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->service_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->service_type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->current_load_capacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->req_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->current_timestamp_req);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeepAliveReq');
    if ($this->service_id !== null) {
      $xfer += $output->writeFieldBegin('service_id', TType::I32, 1);
      $xfer += $output->writeI32($this->service_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type_id !== null) {
      $xfer += $output->writeFieldBegin('service_type_id', TType::I16, 2);
      $xfer += $output->writeI16($this->service_type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->current_load_capacity !== null) {
      $xfer += $output->writeFieldBegin('current_load_capacity', TType::I32, 3);
      $xfer += $output->writeI32($this->current_load_capacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->req_id !== null) {
      $xfer += $output->writeFieldBegin('req_id', TType::I32, 4);
      $xfer += $output->writeI32($this->req_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->current_timestamp_req !== null) {
      $xfer += $output->writeFieldBegin('current_timestamp_req', TType::I64, 5);
      $xfer += $output->writeI64($this->current_timestamp_req);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KeepAliveRes {
  static $_TSPEC;

  public $error_code = null;
  public $error_text = null;
  public $req_id = null;
  public $current_timestamp_req = null;
  public $current_time_res = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'error_text',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'req_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'current_timestamp_req',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'current_time_res',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error_code'])) {
        $this->error_code = $vals['error_code'];
      }
      if (isset($vals['error_text'])) {
        $this->error_text = $vals['error_text'];
      }
      if (isset($vals['req_id'])) {
        $this->req_id = $vals['req_id'];
      }
      if (isset($vals['current_timestamp_req'])) {
        $this->current_timestamp_req = $vals['current_timestamp_req'];
      }
      if (isset($vals['current_time_res'])) {
        $this->current_time_res = $vals['current_time_res'];
      }
    }
  }

  public function getName() {
    return 'KeepAliveRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->error_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error_text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->req_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->current_timestamp_req);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->current_time_res);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeepAliveRes');
    if ($this->error_code !== null) {
      $xfer += $output->writeFieldBegin('error_code', TType::I16, 1);
      $xfer += $output->writeI16($this->error_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_text !== null) {
      $xfer += $output->writeFieldBegin('error_text', TType::STRING, 2);
      $xfer += $output->writeString($this->error_text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->req_id !== null) {
      $xfer += $output->writeFieldBegin('req_id', TType::I32, 3);
      $xfer += $output->writeI32($this->req_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->current_timestamp_req !== null) {
      $xfer += $output->writeFieldBegin('current_timestamp_req', TType::I64, 4);
      $xfer += $output->writeI64($this->current_timestamp_req);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->current_time_res !== null) {
      $xfer += $output->writeFieldBegin('current_time_res', TType::I64, 5);
      $xfer += $output->writeI64($this->current_time_res);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
