/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef test_TYPES_H
#define test_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace test {

struct MessageType {
  enum type {
    MT_BEGIN_NUMBER = 10,
    MT_ECHO_REQ = 10,
    MT_ECHO_RES = 11,
    MT_HELLO_REQ = 12,
    MT_HELLO_RES = 13,
    MT_HELLO_NOTIFY = 14,
    MT_KEEPALIVE_REQ = 15,
    MT_KEEPALIVE_RES = 16,
    MT_KEEPALIVE_NOTIFY = 17,
    MT_END_NUMBER = 18
  };
};

typedef struct _KeepAliveReq__isset {
  _KeepAliveReq__isset() : service_id(false), service_type_id(false), current_load_capacity(false), req_id(false), current_timestamp_req(false) {}
  bool service_id;
  bool service_type_id;
  bool current_load_capacity;
  bool req_id;
  bool current_timestamp_req;
} _KeepAliveReq__isset;

class KeepAliveReq {
 public:

  static const char* ascii_fingerprint; // = "A1762A7ADE36FC073C7A3B61941FA5BF";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x76,0x2A,0x7A,0xDE,0x36,0xFC,0x07,0x3C,0x7A,0x3B,0x61,0x94,0x1F,0xA5,0xBF};

  KeepAliveReq() : service_id(0), service_type_id(0), current_load_capacity(0), req_id(0), current_timestamp_req(0) {
  }

  virtual ~KeepAliveReq() throw() {}

  int32_t service_id;
  int16_t service_type_id;
  int32_t current_load_capacity;
  int32_t req_id;
  int64_t current_timestamp_req;

  _KeepAliveReq__isset __isset;

  bool operator == (const KeepAliveReq & rhs) const
  {
    if (!(service_id == rhs.service_id))
      return false;
    if (!(service_type_id == rhs.service_type_id))
      return false;
    if (!(current_load_capacity == rhs.current_load_capacity))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    if (!(current_timestamp_req == rhs.current_timestamp_req))
      return false;
    return true;
  }
  bool operator != (const KeepAliveReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeepAliveReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KeepAliveRes__isset {
  _KeepAliveRes__isset() : error_code(false), error_text(false), req_id(false), current_timestamp_req(false), current_time_res(false) {}
  bool error_code;
  bool error_text;
  bool req_id;
  bool current_timestamp_req;
  bool current_time_res;
} _KeepAliveRes__isset;

class KeepAliveRes {
 public:

  static const char* ascii_fingerprint; // = "EA8B51362DF46E243B1C2354930D6C5C";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x8B,0x51,0x36,0x2D,0xF4,0x6E,0x24,0x3B,0x1C,0x23,0x54,0x93,0x0D,0x6C,0x5C};

  KeepAliveRes() : error_code(0), error_text(""), req_id(0), current_timestamp_req(0), current_time_res(0) {
  }

  virtual ~KeepAliveRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int32_t req_id;
  int64_t current_timestamp_req;
  int64_t current_time_res;

  _KeepAliveRes__isset __isset;

  bool operator == (const KeepAliveRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    if (!(current_timestamp_req == rhs.current_timestamp_req))
      return false;
    if (!(current_time_res == rhs.current_time_res))
      return false;
    return true;
  }
  bool operator != (const KeepAliveRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeepAliveRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
